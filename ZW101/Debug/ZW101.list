
ZW101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080036d0  080036d0  000046d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003720  08003720  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003720  08003720  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003720  08003720  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003724  08003724  00004724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003728  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003734  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003734  0000514c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdae  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5a  00000000  00000000  00010de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00012940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000977  00000000  00000000  00013548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174e8  00000000  00000000  00013ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4f9  00000000  00000000  0002b3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899d5  00000000  00000000  000388a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003250  00000000  00000000  000c22b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000c5508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080036b8 	.word	0x080036b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080036b8 	.word	0x080036b8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b092      	sub	sp, #72	@ 0x48
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc6b 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f869 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa0f 	bl	800057c <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f8a1 	bl	80002a4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f9b7 	bl	80004d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000166:	f000 f9df 	bl	8000528 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800016a:	f000 f93d 	bl	80003e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800016e:	2104      	movs	r1, #4
 8000170:	4829      	ldr	r0, [pc, #164]	@ (8000218 <main+0xcc>)
 8000172:	f001 fd0f 	bl	8001b94 <HAL_TIM_PWM_Start>
  // 指纹识别指令（17字节）
  uint8_t message[] = {0xEF, 0x01, 				//
 8000176:	4b29      	ldr	r3, [pc, #164]	@ (800021c <main+0xd0>)
 8000178:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800017c:	461d      	mov	r5, r3
 800017e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000182:	682b      	ldr	r3, [r5, #0]
 8000184:	7023      	strb	r3, [r4, #0]
		  	  	  	   0xFF, 0xFF, 0xFF, 0xFF, 	//
					   0x01, 					//
					   0x00,					//
                       0x08, 0x32, 0x02, 0xFF, 0xFF, 0x00, 0x05, 0x02, 0x40};
  uint8_t receiveData[17];  // 接收缓冲区
  uint8_t message1[]={
 8000186:	4b26      	ldr	r3, [pc, #152]	@ (8000220 <main+0xd4>)
 8000188:	f107 0410 	add.w	r4, r7, #16
 800018c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800018e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* USER CODE BEGIN 3 */
//	  HAL_UART_Transmit(&huart2, message1, sizeof(message1), 100);  // 100ms超时发送
//  HAL_UART_Receive(&huart2, receiveData1, 16, 100);
//  memset(receiveData1, 0, sizeof(receiveData1));  // 清空接收缓冲区
    // 1. 发送指纹识别指令
    HAL_UART_Transmit(&huart2, message, sizeof(message), 100);  // 100ms超时发送
 8000192:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000196:	2364      	movs	r3, #100	@ 0x64
 8000198:	2211      	movs	r2, #17
 800019a:	4822      	ldr	r0, [pc, #136]	@ (8000224 <main+0xd8>)
 800019c:	f002 fc03 	bl	80029a6 <HAL_UART_Transmit>

    // 2. 闪烁LED提示指令已发送


    // 3. 接收指纹模块响应（超时1000ms，避免无限等待）
    memset(receiveData, 0, sizeof(receiveData));  // 清空接收缓冲区
 80001a0:	f107 0320 	add.w	r3, r7, #32
 80001a4:	2211      	movs	r2, #17
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f003 fa59 	bl	8003660 <memset>
    HAL_StatusTypeDef rxStatus = HAL_UART_Receive(&huart2, receiveData, 17, HAL_MAX_DELAY);
 80001ae:	f107 0120 	add.w	r1, r7, #32
 80001b2:	f04f 33ff 	mov.w	r3, #4294967295
 80001b6:	2211      	movs	r2, #17
 80001b8:	481a      	ldr	r0, [pc, #104]	@ (8000224 <main+0xd8>)
 80001ba:	f002 fc7f 	bl	8002abc <HAL_UART_Receive>
 80001be:	4603      	mov	r3, r0
 80001c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // 4. 处理接收结果
    if (rxStatus == HAL_OK) {  // 接收成功
 80001c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d11f      	bne.n	800020c <main+0xc0>
      // 检查响应中的成功标志（第9字节为0表示成功，根据模块协议调整）
      if (receiveData[9] == 0x00) {
 80001cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d11b      	bne.n	800020c <main+0xc0>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);  // 成功时闪烁LED
 80001d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001d8:	4813      	ldr	r0, [pc, #76]	@ (8000228 <main+0xdc>)
 80001da:	f001 f809 	bl	80011f0 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 80001de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001e2:	f000 fc85 	bl	8000af0 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80001e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001ea:	480f      	ldr	r0, [pc, #60]	@ (8000228 <main+0xdc>)
 80001ec:	f001 f800 	bl	80011f0 <HAL_GPIO_TogglePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1700);
 80001f0:	4b09      	ldr	r3, [pc, #36]	@ (8000218 <main+0xcc>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80001f8:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_Delay(2000);
 80001fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001fe:	f000 fc77 	bl	8000af0 <HAL_Delay>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 500);
 8000202:	4b05      	ldr	r3, [pc, #20]	@ (8000218 <main+0xcc>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800020a:	639a      	str	r2, [r3, #56]	@ 0x38
    } else {  // 接收超时或失败（如无指纹输入）
      // 不做额外处理，继续循环
    }

    // 5. 等待一段时间再发送下一次指令（避免频繁发送）
    HAL_Delay(500);
 800020c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000210:	f000 fc6e 	bl	8000af0 <HAL_Delay>
  {
 8000214:	e7bd      	b.n	8000192 <main+0x46>
 8000216:	bf00      	nop
 8000218:	20000070 	.word	0x20000070
 800021c:	080036d0 	.word	0x080036d0
 8000220:	080036e4 	.word	0x080036e4
 8000224:	20000100 	.word	0x20000100
 8000228:	40010c00 	.word	0x40010c00

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b090      	sub	sp, #64	@ 0x40
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2228      	movs	r2, #40	@ 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 fa10 	bl	8003660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	4618      	mov	r0, r3
 8000264:	f000 ffde 	bl	8001224 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800026e:	f000 f9d1 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fa4c 	bl	8001728 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000296:	f000 f9bd 	bl	8000614 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	@ 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b096      	sub	sp, #88	@ 0x58
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]
 80002d2:	615a      	str	r2, [r3, #20]
 80002d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2220      	movs	r2, #32
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f003 f9bf 	bl	8003660 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002e2:	4b3f      	ldr	r3, [pc, #252]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 80002e4:	4a3f      	ldr	r2, [pc, #252]	@ (80003e4 <MX_TIM1_Init+0x140>)
 80002e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80002e8:	4b3d      	ldr	r3, [pc, #244]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 80002ea:	2207      	movs	r2, #7
 80002ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ee:	4b3c      	ldr	r3, [pc, #240]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80002f4:	4b3a      	ldr	r3, [pc, #232]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 80002f6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80002fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fc:	4b38      	ldr	r3, [pc, #224]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000302:	4b37      	ldr	r3, [pc, #220]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 8000304:	2200      	movs	r2, #0
 8000306:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000308:	4b35      	ldr	r3, [pc, #212]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 800030a:	2200      	movs	r2, #0
 800030c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800030e:	4834      	ldr	r0, [pc, #208]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 8000310:	f001 fb98 	bl	8001a44 <HAL_TIM_Base_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800031a:	f000 f97b 	bl	8000614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800031e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000322:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000324:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000328:	4619      	mov	r1, r3
 800032a:	482d      	ldr	r0, [pc, #180]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 800032c:	f001 fe86 	bl	800203c <HAL_TIM_ConfigClockSource>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000336:	f000 f96d 	bl	8000614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800033a:	4829      	ldr	r0, [pc, #164]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 800033c:	f001 fbd1 	bl	8001ae2 <HAL_TIM_PWM_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000346:	f000 f965 	bl	8000614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034a:	2300      	movs	r3, #0
 800034c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034e:	2300      	movs	r3, #0
 8000350:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000352:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000356:	4619      	mov	r1, r3
 8000358:	4821      	ldr	r0, [pc, #132]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 800035a:	f002 fa13 	bl	8002784 <HAL_TIMEx_MasterConfigSynchronization>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000364:	f000 f956 	bl	8000614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000368:	2360      	movs	r3, #96	@ 0x60
 800036a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 800036c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000370:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000372:	2300      	movs	r3, #0
 8000374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000376:	2300      	movs	r3, #0
 8000378:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800037a:	2300      	movs	r3, #0
 800037c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800037e:	2300      	movs	r3, #0
 8000380:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000382:	2300      	movs	r3, #0
 8000384:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800038a:	2200      	movs	r2, #0
 800038c:	4619      	mov	r1, r3
 800038e:	4814      	ldr	r0, [pc, #80]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 8000390:	f001 fd92 	bl	8001eb8 <HAL_TIM_PWM_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800039a:	f000 f93b 	bl	8000614 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800039e:	2300      	movs	r3, #0
 80003a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4807      	ldr	r0, [pc, #28]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 80003c2:	f002 fa3d 	bl	8002840 <HAL_TIMEx_ConfigBreakDeadTime>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80003cc:	f000 f922 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003d0:	4803      	ldr	r0, [pc, #12]	@ (80003e0 <MX_TIM1_Init+0x13c>)
 80003d2:	f000 f9b1 	bl	8000738 <HAL_TIM_MspPostInit>

}
 80003d6:	bf00      	nop
 80003d8:	3758      	adds	r7, #88	@ 0x58
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000028 	.word	0x20000028
 80003e4:	40012c00 	.word	0x40012c00

080003e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08e      	sub	sp, #56	@ 0x38
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fc:	f107 0320 	add.w	r3, r7, #32
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
 8000414:	615a      	str	r2, [r3, #20]
 8000416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000418:	4b2d      	ldr	r3, [pc, #180]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 800041a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800041e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000420:	4b2b      	ldr	r3, [pc, #172]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 8000422:	2207      	movs	r2, #7
 8000424:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000426:	4b2a      	ldr	r3, [pc, #168]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800042c:	4b28      	ldr	r3, [pc, #160]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 800042e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000432:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043a:	4b25      	ldr	r3, [pc, #148]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000440:	4823      	ldr	r0, [pc, #140]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 8000442:	f001 faff 	bl	8001a44 <HAL_TIM_Base_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800044c:	f000 f8e2 	bl	8000614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000454:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000456:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800045a:	4619      	mov	r1, r3
 800045c:	481c      	ldr	r0, [pc, #112]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 800045e:	f001 fded 	bl	800203c <HAL_TIM_ConfigClockSource>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000468:	f000 f8d4 	bl	8000614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800046c:	4818      	ldr	r0, [pc, #96]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 800046e:	f001 fb38 	bl	8001ae2 <HAL_TIM_PWM_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000478:	f000 f8cc 	bl	8000614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047c:	2300      	movs	r3, #0
 800047e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000480:	2300      	movs	r3, #0
 8000482:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000484:	f107 0320 	add.w	r3, r7, #32
 8000488:	4619      	mov	r1, r3
 800048a:	4811      	ldr	r0, [pc, #68]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 800048c:	f002 f97a 	bl	8002784 <HAL_TIMEx_MasterConfigSynchronization>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000496:	f000 f8bd 	bl	8000614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800049a:	2360      	movs	r3, #96	@ 0x60
 800049c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2204      	movs	r2, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4807      	ldr	r0, [pc, #28]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 80004b2:	f001 fd01 	bl	8001eb8 <HAL_TIM_PWM_ConfigChannel>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80004bc:	f000 f8aa 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004c0:	4803      	ldr	r0, [pc, #12]	@ (80004d0 <MX_TIM2_Init+0xe8>)
 80004c2:	f000 f939 	bl	8000738 <HAL_TIM_MspPostInit>

}
 80004c6:	bf00      	nop
 80004c8:	3738      	adds	r7, #56	@ 0x38
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000070 	.word	0x20000070

080004d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004d8:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <MX_USART1_UART_Init+0x4c>)
 80004da:	4a12      	ldr	r2, [pc, #72]	@ (8000524 <MX_USART1_UART_Init+0x50>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80004de:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <MX_USART1_UART_Init+0x4c>)
 80004e0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80004e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <MX_USART1_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <MX_USART1_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <MX_USART1_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <MX_USART1_UART_Init+0x4c>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <MX_USART1_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <MX_USART1_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <MX_USART1_UART_Init+0x4c>)
 800050c:	f002 f9fb 	bl	8002906 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000516:	f000 f87d 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000b8 	.word	0x200000b8
 8000524:	40013800 	.word	0x40013800

08000528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <MX_USART2_UART_Init+0x4c>)
 800052e:	4a12      	ldr	r2, [pc, #72]	@ (8000578 <MX_USART2_UART_Init+0x50>)
 8000530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000532:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <MX_USART2_UART_Init+0x4c>)
 8000534:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <MX_USART2_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_USART2_UART_Init+0x4c>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <MX_USART2_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_USART2_UART_Init+0x4c>)
 800054e:	220c      	movs	r2, #12
 8000550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <MX_USART2_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_USART2_UART_Init+0x4c>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	@ (8000574 <MX_USART2_UART_Init+0x4c>)
 8000560:	f002 f9d1 	bl	8002906 <HAL_UART_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800056a:	f000 f853 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000100 	.word	0x20000100
 8000578:	40004400 	.word	0x40004400

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000590:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <MX_GPIO_Init+0x90>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a1d      	ldr	r2, [pc, #116]	@ (800060c <MX_GPIO_Init+0x90>)
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <MX_GPIO_Init+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0320 	and.w	r3, r3, #32
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b18      	ldr	r3, [pc, #96]	@ (800060c <MX_GPIO_Init+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a17      	ldr	r2, [pc, #92]	@ (800060c <MX_GPIO_Init+0x90>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <MX_GPIO_Init+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <MX_GPIO_Init+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a11      	ldr	r2, [pc, #68]	@ (800060c <MX_GPIO_Init+0x90>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_GPIO_Init+0x90>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005de:	480c      	ldr	r0, [pc, #48]	@ (8000610 <MX_GPIO_Init+0x94>)
 80005e0:	f000 fdee 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <MX_GPIO_Init+0x94>)
 80005fe:	f000 fc5b 	bl	8000eb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000602:	bf00      	nop
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	40010c00 	.word	0x40010c00

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    // 错误时闪烁LED提示（快速闪烁）
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800061c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000620:	4803      	ldr	r0, [pc, #12]	@ (8000630 <Error_Handler+0x1c>)
 8000622:	f000 fde5 	bl	80011f0 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000626:	2064      	movs	r0, #100	@ 0x64
 8000628:	f000 fa62 	bl	8000af0 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800062c:	bf00      	nop
 800062e:	e7f5      	b.n	800061c <Error_Handler+0x8>
 8000630:	40010c00 	.word	0x40010c00

08000634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	@ (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <HAL_TIM_Base_MspInit+0x98>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d12c      	bne.n	8000704 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006aa:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <HAL_TIM_Base_MspInit+0x9c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a21      	ldr	r2, [pc, #132]	@ (8000734 <HAL_TIM_Base_MspInit+0x9c>)
 80006b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <HAL_TIM_Base_MspInit+0x9c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2018      	movs	r0, #24
 80006c8:	f000 fb0d 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80006cc:	2018      	movs	r0, #24
 80006ce:	f000 fb26 	bl	8000d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2019      	movs	r0, #25
 80006d8:	f000 fb05 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006dc:	2019      	movs	r0, #25
 80006de:	f000 fb1e 	bl	8000d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	201a      	movs	r0, #26
 80006e8:	f000 fafd 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80006ec:	201a      	movs	r0, #26
 80006ee:	f000 fb16 	bl	8000d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	201b      	movs	r0, #27
 80006f8:	f000 faf5 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80006fc:	201b      	movs	r0, #27
 80006fe:	f000 fb0e 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000702:	e010      	b.n	8000726 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800070c:	d10b      	bne.n	8000726 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <HAL_TIM_Base_MspInit+0x9c>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <HAL_TIM_Base_MspInit+0x9c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <HAL_TIM_Base_MspInit+0x9c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40012c00 	.word	0x40012c00
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <HAL_TIM_MspPostInit+0x98>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d119      	bne.n	800078c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <HAL_TIM_MspPostInit+0x9c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a1d      	ldr	r2, [pc, #116]	@ (80007d4 <HAL_TIM_MspPostInit+0x9c>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <HAL_TIM_MspPostInit+0x9c>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2302      	movs	r3, #2
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	4814      	ldr	r0, [pc, #80]	@ (80007d8 <HAL_TIM_MspPostInit+0xa0>)
 8000786:	f000 fb97 	bl	8000eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800078a:	e01c      	b.n	80007c6 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000794:	d117      	bne.n	80007c6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <HAL_TIM_MspPostInit+0x9c>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <HAL_TIM_MspPostInit+0x9c>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <HAL_TIM_MspPostInit+0x9c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <HAL_TIM_MspPostInit+0xa0>)
 80007c2:	f000 fb79 	bl	8000eb8 <HAL_GPIO_Init>
}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40012c00 	.word	0x40012c00
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010800 	.word	0x40010800

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a3f      	ldr	r2, [pc, #252]	@ (80008f4 <HAL_UART_MspInit+0x118>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d13a      	bne.n	8000872 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fc:	4b3e      	ldr	r3, [pc, #248]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a3d      	ldr	r2, [pc, #244]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b3b      	ldr	r3, [pc, #236]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b38      	ldr	r3, [pc, #224]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a37      	ldr	r2, [pc, #220]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b35      	ldr	r3, [pc, #212]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800082c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4619      	mov	r1, r3
 8000840:	482e      	ldr	r0, [pc, #184]	@ (80008fc <HAL_UART_MspInit+0x120>)
 8000842:	f000 fb39 	bl	8000eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	4619      	mov	r1, r3
 800085a:	4828      	ldr	r0, [pc, #160]	@ (80008fc <HAL_UART_MspInit+0x120>)
 800085c:	f000 fb2c 	bl	8000eb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2025      	movs	r0, #37	@ 0x25
 8000866:	f000 fa3e 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800086a:	2025      	movs	r0, #37	@ 0x25
 800086c:	f000 fa57 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000870:	e03c      	b.n	80008ec <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a22      	ldr	r2, [pc, #136]	@ (8000900 <HAL_UART_MspInit+0x124>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d137      	bne.n	80008ec <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800087c:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	4a1d      	ldr	r2, [pc, #116]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 8000882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000886:	61d3      	str	r3, [r2, #28]
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_UART_MspInit+0x11c>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ac:	2304      	movs	r3, #4
 80008ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	4619      	mov	r1, r3
 80008be:	480f      	ldr	r0, [pc, #60]	@ (80008fc <HAL_UART_MspInit+0x120>)
 80008c0:	f000 fafa 	bl	8000eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008c4:	2308      	movs	r3, #8
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0318 	add.w	r3, r7, #24
 80008d4:	4619      	mov	r1, r3
 80008d6:	4809      	ldr	r0, [pc, #36]	@ (80008fc <HAL_UART_MspInit+0x120>)
 80008d8:	f000 faee 	bl	8000eb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2026      	movs	r0, #38	@ 0x26
 80008e2:	f000 fa00 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008e6:	2026      	movs	r0, #38	@ 0x26
 80008e8:	f000 fa19 	bl	8000d1e <HAL_NVIC_EnableIRQ>
}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	@ 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40013800 	.word	0x40013800
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800
 8000900:	40004400 	.word	0x40004400

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <NMI_Handler+0x4>

0800090c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <MemManage_Handler+0x4>

0800091c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <UsageFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f8b0 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <TIM1_BRK_IRQHandler+0x10>)
 8000962:	f001 f9b9 	bl	8001cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000028 	.word	0x20000028

08000970 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <TIM1_UP_IRQHandler+0x10>)
 8000976:	f001 f9af 	bl	8001cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000028 	.word	0x20000028

08000984 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <TIM1_TRG_COM_IRQHandler+0x10>)
 800098a:	f001 f9a5 	bl	8001cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000028 	.word	0x20000028

08000998 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800099c:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <TIM1_CC_IRQHandler+0x10>)
 800099e:	f001 f99b 	bl	8001cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000028 	.word	0x20000028

080009ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <USART1_IRQHandler+0x10>)
 80009b2:	f002 f91b 	bl	8002bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000b8 	.word	0x200000b8

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <USART2_IRQHandler+0x10>)
 80009c6:	f002 f911 	bl	8002bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000100 	.word	0x20000100

080009d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e0:	f7ff fff8 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009e6:	490c      	ldr	r1, [pc, #48]	@ (8000a18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009e8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009fc:	4c09      	ldr	r4, [pc, #36]	@ (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f002 fe31 	bl	8003670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff fb9d 	bl	800014c <main>
  bx lr
 8000a12:	4770      	bx	lr
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a1c:	08003728 	.word	0x08003728
  ldr r2, =_sbss
 8000a20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a24:	2000014c 	.word	0x2000014c

08000a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_2_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_Init+0x28>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_Init+0x28>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f947 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	200f      	movs	r0, #15
 8000a44:	f000 f808 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fdf4 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x54>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_InitTick+0x58>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f95f 	bl	8000d3a <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f927 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	@ (8000ab4 <HAL_InitTick+0x5c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a03      	ldr	r2, [pc, #12]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000148 	.word	0x20000148

08000adc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	@ (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	20000148 	.word	0x20000148

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff fff0 	bl	8000adc <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffe0 	bl	8000adc <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4906      	ldr	r1, [pc, #24]	@ (8000bd0 <__NVIC_EnableIRQ+0x34>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	@ 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	@ 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff90 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff2d 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff42 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff90 	bl	8000c28 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5f 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff35 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffa2 	bl	8000c8c <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d008      	beq.n	8000d7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e020      	b.n	8000dbe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 020e 	bic.w	r2, r2, #14
 8000d8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000da4:	2101      	movs	r1, #1
 8000da6:	fa01 f202 	lsl.w	r2, r1, r2
 8000daa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d005      	beq.n	8000dec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e051      	b.n	8000e90 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 020e 	bic.w	r2, r2, #14
 8000dfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0201 	bic.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a22      	ldr	r2, [pc, #136]	@ (8000e9c <HAL_DMA_Abort_IT+0xd4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d029      	beq.n	8000e6a <HAL_DMA_Abort_IT+0xa2>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a21      	ldr	r2, [pc, #132]	@ (8000ea0 <HAL_DMA_Abort_IT+0xd8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d022      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x9e>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea4 <HAL_DMA_Abort_IT+0xdc>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d01a      	beq.n	8000e60 <HAL_DMA_Abort_IT+0x98>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea8 <HAL_DMA_Abort_IT+0xe0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d012      	beq.n	8000e5a <HAL_DMA_Abort_IT+0x92>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <HAL_DMA_Abort_IT+0xe4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00a      	beq.n	8000e54 <HAL_DMA_Abort_IT+0x8c>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <HAL_DMA_Abort_IT+0xe8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d102      	bne.n	8000e4e <HAL_DMA_Abort_IT+0x86>
 8000e48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e4c:	e00e      	b.n	8000e6c <HAL_DMA_Abort_IT+0xa4>
 8000e4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e52:	e00b      	b.n	8000e6c <HAL_DMA_Abort_IT+0xa4>
 8000e54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e58:	e008      	b.n	8000e6c <HAL_DMA_Abort_IT+0xa4>
 8000e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5e:	e005      	b.n	8000e6c <HAL_DMA_Abort_IT+0xa4>
 8000e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e64:	e002      	b.n	8000e6c <HAL_DMA_Abort_IT+0xa4>
 8000e66:	2310      	movs	r3, #16
 8000e68:	e000      	b.n	8000e6c <HAL_DMA_Abort_IT+0xa4>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <HAL_DMA_Abort_IT+0xec>)
 8000e6e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	4798      	blx	r3
    } 
  }
  return status;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40020008 	.word	0x40020008
 8000ea0:	4002001c 	.word	0x4002001c
 8000ea4:	40020030 	.word	0x40020030
 8000ea8:	40020044 	.word	0x40020044
 8000eac:	40020058 	.word	0x40020058
 8000eb0:	4002006c 	.word	0x4002006c
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b08b      	sub	sp, #44	@ 0x2c
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eca:	e169      	b.n	80011a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f040 8158 	bne.w	800119a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	4a9a      	ldr	r2, [pc, #616]	@ (8001158 <HAL_GPIO_Init+0x2a0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d05e      	beq.n	8000fb2 <HAL_GPIO_Init+0xfa>
 8000ef4:	4a98      	ldr	r2, [pc, #608]	@ (8001158 <HAL_GPIO_Init+0x2a0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d875      	bhi.n	8000fe6 <HAL_GPIO_Init+0x12e>
 8000efa:	4a98      	ldr	r2, [pc, #608]	@ (800115c <HAL_GPIO_Init+0x2a4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d058      	beq.n	8000fb2 <HAL_GPIO_Init+0xfa>
 8000f00:	4a96      	ldr	r2, [pc, #600]	@ (800115c <HAL_GPIO_Init+0x2a4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d86f      	bhi.n	8000fe6 <HAL_GPIO_Init+0x12e>
 8000f06:	4a96      	ldr	r2, [pc, #600]	@ (8001160 <HAL_GPIO_Init+0x2a8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d052      	beq.n	8000fb2 <HAL_GPIO_Init+0xfa>
 8000f0c:	4a94      	ldr	r2, [pc, #592]	@ (8001160 <HAL_GPIO_Init+0x2a8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d869      	bhi.n	8000fe6 <HAL_GPIO_Init+0x12e>
 8000f12:	4a94      	ldr	r2, [pc, #592]	@ (8001164 <HAL_GPIO_Init+0x2ac>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d04c      	beq.n	8000fb2 <HAL_GPIO_Init+0xfa>
 8000f18:	4a92      	ldr	r2, [pc, #584]	@ (8001164 <HAL_GPIO_Init+0x2ac>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d863      	bhi.n	8000fe6 <HAL_GPIO_Init+0x12e>
 8000f1e:	4a92      	ldr	r2, [pc, #584]	@ (8001168 <HAL_GPIO_Init+0x2b0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d046      	beq.n	8000fb2 <HAL_GPIO_Init+0xfa>
 8000f24:	4a90      	ldr	r2, [pc, #576]	@ (8001168 <HAL_GPIO_Init+0x2b0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d85d      	bhi.n	8000fe6 <HAL_GPIO_Init+0x12e>
 8000f2a:	2b12      	cmp	r3, #18
 8000f2c:	d82a      	bhi.n	8000f84 <HAL_GPIO_Init+0xcc>
 8000f2e:	2b12      	cmp	r3, #18
 8000f30:	d859      	bhi.n	8000fe6 <HAL_GPIO_Init+0x12e>
 8000f32:	a201      	add	r2, pc, #4	@ (adr r2, 8000f38 <HAL_GPIO_Init+0x80>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000fb3 	.word	0x08000fb3
 8000f3c:	08000f8d 	.word	0x08000f8d
 8000f40:	08000f9f 	.word	0x08000f9f
 8000f44:	08000fe1 	.word	0x08000fe1
 8000f48:	08000fe7 	.word	0x08000fe7
 8000f4c:	08000fe7 	.word	0x08000fe7
 8000f50:	08000fe7 	.word	0x08000fe7
 8000f54:	08000fe7 	.word	0x08000fe7
 8000f58:	08000fe7 	.word	0x08000fe7
 8000f5c:	08000fe7 	.word	0x08000fe7
 8000f60:	08000fe7 	.word	0x08000fe7
 8000f64:	08000fe7 	.word	0x08000fe7
 8000f68:	08000fe7 	.word	0x08000fe7
 8000f6c:	08000fe7 	.word	0x08000fe7
 8000f70:	08000fe7 	.word	0x08000fe7
 8000f74:	08000fe7 	.word	0x08000fe7
 8000f78:	08000fe7 	.word	0x08000fe7
 8000f7c:	08000f95 	.word	0x08000f95
 8000f80:	08000fa9 	.word	0x08000fa9
 8000f84:	4a79      	ldr	r2, [pc, #484]	@ (800116c <HAL_GPIO_Init+0x2b4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f8a:	e02c      	b.n	8000fe6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	623b      	str	r3, [r7, #32]
          break;
 8000f92:	e029      	b.n	8000fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e024      	b.n	8000fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	623b      	str	r3, [r7, #32]
          break;
 8000fa6:	e01f      	b.n	8000fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	330c      	adds	r3, #12
 8000fae:	623b      	str	r3, [r7, #32]
          break;
 8000fb0:	e01a      	b.n	8000fe8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e013      	b.n	8000fe8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d105      	bne.n	8000fd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	611a      	str	r2, [r3, #16]
          break;
 8000fd2:	e009      	b.n	8000fe8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	615a      	str	r2, [r3, #20]
          break;
 8000fde:	e003      	b.n	8000fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x130>
          break;
 8000fe6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2bff      	cmp	r3, #255	@ 0xff
 8000fec:	d801      	bhi.n	8000ff2 <HAL_GPIO_Init+0x13a>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	e001      	b.n	8000ff6 <HAL_GPIO_Init+0x13e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	2bff      	cmp	r3, #255	@ 0xff
 8000ffc:	d802      	bhi.n	8001004 <HAL_GPIO_Init+0x14c>
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	e002      	b.n	800100a <HAL_GPIO_Init+0x152>
 8001004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001006:	3b08      	subs	r3, #8
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	210f      	movs	r1, #15
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	401a      	ands	r2, r3
 800101c:	6a39      	ldr	r1, [r7, #32]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	431a      	orrs	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 80b1 	beq.w	800119a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001038:	4b4d      	ldr	r3, [pc, #308]	@ (8001170 <HAL_GPIO_Init+0x2b8>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a4c      	ldr	r2, [pc, #304]	@ (8001170 <HAL_GPIO_Init+0x2b8>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b4a      	ldr	r3, [pc, #296]	@ (8001170 <HAL_GPIO_Init+0x2b8>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001050:	4a48      	ldr	r2, [pc, #288]	@ (8001174 <HAL_GPIO_Init+0x2bc>)
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a40      	ldr	r2, [pc, #256]	@ (8001178 <HAL_GPIO_Init+0x2c0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d013      	beq.n	80010a4 <HAL_GPIO_Init+0x1ec>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a3f      	ldr	r2, [pc, #252]	@ (800117c <HAL_GPIO_Init+0x2c4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d00d      	beq.n	80010a0 <HAL_GPIO_Init+0x1e8>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a3e      	ldr	r2, [pc, #248]	@ (8001180 <HAL_GPIO_Init+0x2c8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d007      	beq.n	800109c <HAL_GPIO_Init+0x1e4>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a3d      	ldr	r2, [pc, #244]	@ (8001184 <HAL_GPIO_Init+0x2cc>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d101      	bne.n	8001098 <HAL_GPIO_Init+0x1e0>
 8001094:	2303      	movs	r3, #3
 8001096:	e006      	b.n	80010a6 <HAL_GPIO_Init+0x1ee>
 8001098:	2304      	movs	r3, #4
 800109a:	e004      	b.n	80010a6 <HAL_GPIO_Init+0x1ee>
 800109c:	2302      	movs	r3, #2
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_Init+0x1ee>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <HAL_GPIO_Init+0x1ee>
 80010a4:	2300      	movs	r3, #0
 80010a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a8:	f002 0203 	and.w	r2, r2, #3
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	4093      	lsls	r3, r2
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010b6:	492f      	ldr	r1, [pc, #188]	@ (8001174 <HAL_GPIO_Init+0x2bc>)
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	492c      	ldr	r1, [pc, #176]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	608b      	str	r3, [r1, #8]
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010de:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	4928      	ldr	r1, [pc, #160]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	4922      	ldr	r1, [pc, #136]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	60cb      	str	r3, [r1, #12]
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	491e      	ldr	r1, [pc, #120]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 8001110:	4013      	ands	r3, r2
 8001112:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4918      	ldr	r1, [pc, #96]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	4914      	ldr	r1, [pc, #80]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 8001138:	4013      	ands	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d021      	beq.n	800118c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	490e      	ldr	r1, [pc, #56]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
 8001154:	e021      	b.n	800119a <HAL_GPIO_Init+0x2e2>
 8001156:	bf00      	nop
 8001158:	10320000 	.word	0x10320000
 800115c:	10310000 	.word	0x10310000
 8001160:	10220000 	.word	0x10220000
 8001164:	10210000 	.word	0x10210000
 8001168:	10120000 	.word	0x10120000
 800116c:	10110000 	.word	0x10110000
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000
 8001178:	40010800 	.word	0x40010800
 800117c:	40010c00 	.word	0x40010c00
 8001180:	40011000 	.word	0x40011000
 8001184:	40011400 	.word	0x40011400
 8001188:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_GPIO_Init+0x304>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	43db      	mvns	r3, r3
 8001194:	4909      	ldr	r1, [pc, #36]	@ (80011bc <HAL_GPIO_Init+0x304>)
 8001196:	4013      	ands	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119c:	3301      	adds	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f47f ae8e 	bne.w	8000ecc <HAL_GPIO_Init+0x14>
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	372c      	adds	r7, #44	@ 0x2c
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4013      	ands	r3, r2
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43d9      	mvns	r1, r3
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	400b      	ands	r3, r1
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	611a      	str	r2, [r3, #16]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
	...

08001224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e272      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 8087 	beq.w	8001352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001244:	4b92      	ldr	r3, [pc, #584]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b04      	cmp	r3, #4
 800124e:	d00c      	beq.n	800126a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001250:	4b8f      	ldr	r3, [pc, #572]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 030c 	and.w	r3, r3, #12
 8001258:	2b08      	cmp	r3, #8
 800125a:	d112      	bne.n	8001282 <HAL_RCC_OscConfig+0x5e>
 800125c:	4b8c      	ldr	r3, [pc, #560]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001268:	d10b      	bne.n	8001282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126a:	4b89      	ldr	r3, [pc, #548]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d06c      	beq.n	8001350 <HAL_RCC_OscConfig+0x12c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d168      	bne.n	8001350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e24c      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128a:	d106      	bne.n	800129a <HAL_RCC_OscConfig+0x76>
 800128c:	4b80      	ldr	r3, [pc, #512]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a7f      	ldr	r2, [pc, #508]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e02e      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x98>
 80012a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a7a      	ldr	r2, [pc, #488]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b78      	ldr	r3, [pc, #480]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a77      	ldr	r2, [pc, #476]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e01d      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0xbc>
 80012c6:	4b72      	ldr	r3, [pc, #456]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a71      	ldr	r2, [pc, #452]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 80012e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b68      	ldr	r3, [pc, #416]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a67      	ldr	r2, [pc, #412]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fbec 	bl	8000adc <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fbe8 	bl	8000adc <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	@ 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e200      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0xe4>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fbd8 	bl	8000adc <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fbd4 	bl	8000adc <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	@ 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e1ec      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x10c>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d063      	beq.n	8001426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800135e:	4b4c      	ldr	r3, [pc, #304]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800136a:	4b49      	ldr	r3, [pc, #292]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b08      	cmp	r3, #8
 8001374:	d11c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x18c>
 8001376:	4b46      	ldr	r3, [pc, #280]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	4b43      	ldr	r3, [pc, #268]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_RCC_OscConfig+0x176>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e1c0      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b3d      	ldr	r3, [pc, #244]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4939      	ldr	r1, [pc, #228]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	e03a      	b.n	8001426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b8:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <HAL_RCC_OscConfig+0x270>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013be:	f7ff fb8d 	bl	8000adc <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fb89 	bl	8000adc <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e1a1      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4927      	ldr	r1, [pc, #156]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <HAL_RCC_OscConfig+0x270>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb6c 	bl	8000adc <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fb68 	bl	8000adc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e180      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d03a      	beq.n	80014a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d019      	beq.n	800146e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_RCC_OscConfig+0x274>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fb4c 	bl	8000adc <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fb48 	bl	8000adc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e160      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f000 face 	bl	8001a08 <RCC_Delay>
 800146c:	e01c      	b.n	80014a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_RCC_OscConfig+0x274>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fb32 	bl	8000adc <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147a:	e00f      	b.n	800149c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fb2e 	bl	8000adc <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d908      	bls.n	800149c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e146      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000
 8001494:	42420000 	.word	0x42420000
 8001498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b92      	ldr	r3, [pc, #584]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e9      	bne.n	800147c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a6 	beq.w	8001602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b8b      	ldr	r3, [pc, #556]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10d      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b88      	ldr	r3, [pc, #544]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a87      	ldr	r2, [pc, #540]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b85      	ldr	r3, [pc, #532]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b82      	ldr	r3, [pc, #520]	@ (80016ec <HAL_RCC_OscConfig+0x4c8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b7f      	ldr	r3, [pc, #508]	@ (80016ec <HAL_RCC_OscConfig+0x4c8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a7e      	ldr	r2, [pc, #504]	@ (80016ec <HAL_RCC_OscConfig+0x4c8>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff faef 	bl	8000adc <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff faeb 	bl	8000adc <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b64      	cmp	r3, #100	@ 0x64
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e103      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b75      	ldr	r3, [pc, #468]	@ (80016ec <HAL_RCC_OscConfig+0x4c8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x312>
 8001528:	4b6f      	ldr	r3, [pc, #444]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a6e      	ldr	r2, [pc, #440]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	e02d      	b.n	8001592 <HAL_RCC_OscConfig+0x36e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x334>
 800153e:	4b6a      	ldr	r3, [pc, #424]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a69      	ldr	r2, [pc, #420]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	4b67      	ldr	r3, [pc, #412]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4a66      	ldr	r2, [pc, #408]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	6213      	str	r3, [r2, #32]
 8001556:	e01c      	b.n	8001592 <HAL_RCC_OscConfig+0x36e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b05      	cmp	r3, #5
 800155e:	d10c      	bne.n	800157a <HAL_RCC_OscConfig+0x356>
 8001560:	4b61      	ldr	r3, [pc, #388]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a60      	ldr	r2, [pc, #384]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	4b5e      	ldr	r3, [pc, #376]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4a5d      	ldr	r2, [pc, #372]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6213      	str	r3, [r2, #32]
 8001578:	e00b      	b.n	8001592 <HAL_RCC_OscConfig+0x36e>
 800157a:	4b5b      	ldr	r3, [pc, #364]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a5a      	ldr	r2, [pc, #360]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	4b58      	ldr	r3, [pc, #352]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a57      	ldr	r2, [pc, #348]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	f023 0304 	bic.w	r3, r3, #4
 8001590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d015      	beq.n	80015c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fa9f 	bl	8000adc <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fa9b 	bl	8000adc <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e0b1      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	4b4b      	ldr	r3, [pc, #300]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0ee      	beq.n	80015a2 <HAL_RCC_OscConfig+0x37e>
 80015c4:	e014      	b.n	80015f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fa89 	bl	8000adc <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fa85 	bl	8000adc <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e09b      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	4b40      	ldr	r3, [pc, #256]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ee      	bne.n	80015ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d105      	bne.n	8001602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f6:	4b3c      	ldr	r3, [pc, #240]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a3b      	ldr	r2, [pc, #236]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8087 	beq.w	800171a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800160c:	4b36      	ldr	r3, [pc, #216]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d061      	beq.n	80016dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d146      	bne.n	80016ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001620:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <HAL_RCC_OscConfig+0x4cc>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fa59 	bl	8000adc <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff fa55 	bl	8000adc <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e06d      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001640:	4b29      	ldr	r3, [pc, #164]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001654:	d108      	bne.n	8001668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4921      	ldr	r1, [pc, #132]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a19      	ldr	r1, [r3, #32]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	430b      	orrs	r3, r1
 800167a:	491b      	ldr	r1, [pc, #108]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <HAL_RCC_OscConfig+0x4cc>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fa29 	bl	8000adc <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fa25 	bl	8000adc <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e03d      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x46a>
 80016ac:	e035      	b.n	800171a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_RCC_OscConfig+0x4cc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa12 	bl	8000adc <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fa0e 	bl	8000adc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e026      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x498>
 80016da:	e01e      	b.n	800171a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e019      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
 80016f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_RCC_OscConfig+0x500>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	429a      	cmp	r2, r3
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d001      	beq.n	800171a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0d0      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b6a      	ldr	r3, [pc, #424]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d910      	bls.n	800176c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b67      	ldr	r3, [pc, #412]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 0207 	bic.w	r2, r3, #7
 8001752:	4965      	ldr	r1, [pc, #404]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a58      	ldr	r2, [pc, #352]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800178e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a52      	ldr	r2, [pc, #328]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d040      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d115      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b41      	ldr	r3, [pc, #260]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e073      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06b      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b39      	ldr	r3, [pc, #228]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4936      	ldr	r1, [pc, #216]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff f960 	bl	8000adc <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff f95c 	bl	8000adc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e053      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d210      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 0207 	bic.w	r2, r3, #7
 800185e:	4922      	ldr	r1, [pc, #136]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1cc>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1d0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f8be 	bl	8000a58 <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	080036f4 	.word	0x080036f4
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x94>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x30>
 8001926:	2b08      	cmp	r3, #8
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x36>
 800192a:	e027      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800192c:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x98>)
 800192e:	613b      	str	r3, [r7, #16]
      break;
 8001930:	e027      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	0c9b      	lsrs	r3, r3, #18
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x9c>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d010      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x94>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	0c5b      	lsrs	r3, r3, #17
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	4a11      	ldr	r2, [pc, #68]	@ (800199c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x98>)
 800195e:	fb03 f202 	mul.w	r2, r3, r2
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e004      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	613b      	str	r3, [r7, #16]
      break;
 800197a:	e002      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x98>)
 800197e:	613b      	str	r3, [r7, #16]
      break;
 8001980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001982:	693b      	ldr	r3, [r7, #16]
}
 8001984:	4618      	mov	r0, r3
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	007a1200 	.word	0x007a1200
 8001998:	0800370c 	.word	0x0800370c
 800199c:	0800371c 	.word	0x0800371c
 80019a0:	003d0900 	.word	0x003d0900

080019a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a8:	4b02      	ldr	r3, [pc, #8]	@ (80019b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff2 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	@ (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08003704 	.word	0x08003704

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	0adb      	lsrs	r3, r3, #11
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	@ (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	08003704 	.word	0x08003704

08001a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <RCC_Delay+0x34>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <RCC_Delay+0x38>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0a5b      	lsrs	r3, r3, #9
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a24:	bf00      	nop
  }
  while (Delay --);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	60fa      	str	r2, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <RCC_Delay+0x1c>
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	10624dd3 	.word	0x10624dd3

08001a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e041      	b.n	8001ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fe14 	bl	8000698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f000 fbce 	bl	8002224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e041      	b.n	8001b78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f839 	bl	8001b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f000 fb7f 	bl	8002224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_TIM_PWM_Start+0x24>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	bf14      	ite	ne
 8001bb0:	2301      	movne	r3, #1
 8001bb2:	2300      	moveq	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e022      	b.n	8001bfe <HAL_TIM_PWM_Start+0x6a>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d109      	bne.n	8001bd2 <HAL_TIM_PWM_Start+0x3e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	e015      	b.n	8001bfe <HAL_TIM_PWM_Start+0x6a>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d109      	bne.n	8001bec <HAL_TIM_PWM_Start+0x58>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	e008      	b.n	8001bfe <HAL_TIM_PWM_Start+0x6a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	bf14      	ite	ne
 8001bf8:	2301      	movne	r3, #1
 8001bfa:	2300      	moveq	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e05e      	b.n	8001cc4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d104      	bne.n	8001c16 <HAL_TIM_PWM_Start+0x82>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c14:	e013      	b.n	8001c3e <HAL_TIM_PWM_Start+0xaa>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d104      	bne.n	8001c26 <HAL_TIM_PWM_Start+0x92>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c24:	e00b      	b.n	8001c3e <HAL_TIM_PWM_Start+0xaa>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d104      	bne.n	8001c36 <HAL_TIM_PWM_Start+0xa2>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c34:	e003      	b.n	8001c3e <HAL_TIM_PWM_Start+0xaa>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	6839      	ldr	r1, [r7, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fd78 	bl	800273c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1e      	ldr	r2, [pc, #120]	@ (8001ccc <HAL_TIM_PWM_Start+0x138>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d107      	bne.n	8001c66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ccc <HAL_TIM_PWM_Start+0x138>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00e      	beq.n	8001c8e <HAL_TIM_PWM_Start+0xfa>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c78:	d009      	beq.n	8001c8e <HAL_TIM_PWM_Start+0xfa>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <HAL_TIM_PWM_Start+0x13c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d004      	beq.n	8001c8e <HAL_TIM_PWM_Start+0xfa>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <HAL_TIM_PWM_Start+0x140>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d111      	bne.n	8001cb2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b06      	cmp	r3, #6
 8001c9e:	d010      	beq.n	8001cc2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb0:	e007      	b.n	8001cc2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000800 	.word	0x40000800

08001cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d020      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01b      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0202 	mvn.w	r2, #2
 8001d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fa63 	bl	80021ee <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fa56 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fa65 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d020      	beq.n	8001d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01b      	beq.n	8001d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0204 	mvn.w	r2, #4
 8001d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fa3d 	bl	80021ee <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fa30 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fa3f 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d020      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01b      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0208 	mvn.w	r2, #8
 8001da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2204      	movs	r2, #4
 8001daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa17 	bl	80021ee <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fa0a 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fa19 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0210 	mvn.w	r2, #16
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2208      	movs	r2, #8
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f9f1 	bl	80021ee <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f9e4 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f9f3 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0201 	mvn.w	r2, #1
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f9c3 	bl	80021ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00c      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fd46 	bl	80028f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00c      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f9c3 	bl	8002212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0220 	mvn.w	r2, #32
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fd19 	bl	80028e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e0ae      	b.n	8002034 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	f200 809f 	bhi.w	8002024 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f21 	.word	0x08001f21
 8001ef0:	08002025 	.word	0x08002025
 8001ef4:	08002025 	.word	0x08002025
 8001ef8:	08002025 	.word	0x08002025
 8001efc:	08001f61 	.word	0x08001f61
 8001f00:	08002025 	.word	0x08002025
 8001f04:	08002025 	.word	0x08002025
 8001f08:	08002025 	.word	0x08002025
 8001f0c:	08001fa3 	.word	0x08001fa3
 8001f10:	08002025 	.word	0x08002025
 8001f14:	08002025 	.word	0x08002025
 8001f18:	08002025 	.word	0x08002025
 8001f1c:	08001fe3 	.word	0x08001fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f9ea 	bl	8002300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0208 	orr.w	r2, r2, #8
 8001f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6999      	ldr	r1, [r3, #24]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	619a      	str	r2, [r3, #24]
      break;
 8001f5e:	e064      	b.n	800202a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fa30 	bl	80023cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6999      	ldr	r1, [r3, #24]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	021a      	lsls	r2, r3, #8
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	619a      	str	r2, [r3, #24]
      break;
 8001fa0:	e043      	b.n	800202a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fa79 	bl	80024a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0208 	orr.w	r2, r2, #8
 8001fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69da      	ldr	r2, [r3, #28]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0204 	bic.w	r2, r2, #4
 8001fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69d9      	ldr	r1, [r3, #28]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	61da      	str	r2, [r3, #28]
      break;
 8001fe0:	e023      	b.n	800202a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fac3 	bl	8002574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800200c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69d9      	ldr	r1, [r3, #28]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	021a      	lsls	r2, r3, #8
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	61da      	str	r2, [r3, #28]
      break;
 8002022:	e002      	b.n	800202a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	75fb      	strb	r3, [r7, #23]
      break;
 8002028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_TIM_ConfigClockSource+0x1c>
 8002054:	2302      	movs	r3, #2
 8002056:	e0b4      	b.n	80021c2 <HAL_TIM_ConfigClockSource+0x186>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800207e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002090:	d03e      	beq.n	8002110 <HAL_TIM_ConfigClockSource+0xd4>
 8002092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002096:	f200 8087 	bhi.w	80021a8 <HAL_TIM_ConfigClockSource+0x16c>
 800209a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800209e:	f000 8086 	beq.w	80021ae <HAL_TIM_ConfigClockSource+0x172>
 80020a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020a6:	d87f      	bhi.n	80021a8 <HAL_TIM_ConfigClockSource+0x16c>
 80020a8:	2b70      	cmp	r3, #112	@ 0x70
 80020aa:	d01a      	beq.n	80020e2 <HAL_TIM_ConfigClockSource+0xa6>
 80020ac:	2b70      	cmp	r3, #112	@ 0x70
 80020ae:	d87b      	bhi.n	80021a8 <HAL_TIM_ConfigClockSource+0x16c>
 80020b0:	2b60      	cmp	r3, #96	@ 0x60
 80020b2:	d050      	beq.n	8002156 <HAL_TIM_ConfigClockSource+0x11a>
 80020b4:	2b60      	cmp	r3, #96	@ 0x60
 80020b6:	d877      	bhi.n	80021a8 <HAL_TIM_ConfigClockSource+0x16c>
 80020b8:	2b50      	cmp	r3, #80	@ 0x50
 80020ba:	d03c      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0xfa>
 80020bc:	2b50      	cmp	r3, #80	@ 0x50
 80020be:	d873      	bhi.n	80021a8 <HAL_TIM_ConfigClockSource+0x16c>
 80020c0:	2b40      	cmp	r3, #64	@ 0x40
 80020c2:	d058      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0x13a>
 80020c4:	2b40      	cmp	r3, #64	@ 0x40
 80020c6:	d86f      	bhi.n	80021a8 <HAL_TIM_ConfigClockSource+0x16c>
 80020c8:	2b30      	cmp	r3, #48	@ 0x30
 80020ca:	d064      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x15a>
 80020cc:	2b30      	cmp	r3, #48	@ 0x30
 80020ce:	d86b      	bhi.n	80021a8 <HAL_TIM_ConfigClockSource+0x16c>
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d060      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x15a>
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d867      	bhi.n	80021a8 <HAL_TIM_ConfigClockSource+0x16c>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d05c      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x15a>
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d05a      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x15a>
 80020e0:	e062      	b.n	80021a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020f2:	f000 fb04 	bl	80026fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	609a      	str	r2, [r3, #8]
      break;
 800210e:	e04f      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002120:	f000 faed 	bl	80026fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002132:	609a      	str	r2, [r3, #8]
      break;
 8002134:	e03c      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002142:	461a      	mov	r2, r3
 8002144:	f000 fa64 	bl	8002610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2150      	movs	r1, #80	@ 0x50
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fabb 	bl	80026ca <TIM_ITRx_SetConfig>
      break;
 8002154:	e02c      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002162:	461a      	mov	r2, r3
 8002164:	f000 fa82 	bl	800266c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2160      	movs	r1, #96	@ 0x60
 800216e:	4618      	mov	r0, r3
 8002170:	f000 faab 	bl	80026ca <TIM_ITRx_SetConfig>
      break;
 8002174:	e01c      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002182:	461a      	mov	r2, r3
 8002184:	f000 fa44 	bl	8002610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2140      	movs	r1, #64	@ 0x40
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fa9b 	bl	80026ca <TIM_ITRx_SetConfig>
      break;
 8002194:	e00c      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f000 fa92 	bl	80026ca <TIM_ITRx_SetConfig>
      break;
 80021a6:	e003      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
      break;
 80021ac:	e000      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a2f      	ldr	r2, [pc, #188]	@ (80022f4 <TIM_Base_SetConfig+0xd0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00b      	beq.n	8002254 <TIM_Base_SetConfig+0x30>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002242:	d007      	beq.n	8002254 <TIM_Base_SetConfig+0x30>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a2c      	ldr	r2, [pc, #176]	@ (80022f8 <TIM_Base_SetConfig+0xd4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d003      	beq.n	8002254 <TIM_Base_SetConfig+0x30>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a2b      	ldr	r2, [pc, #172]	@ (80022fc <TIM_Base_SetConfig+0xd8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800225a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <TIM_Base_SetConfig+0xd0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0x62>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0x62>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1f      	ldr	r2, [pc, #124]	@ (80022f8 <TIM_Base_SetConfig+0xd4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0x62>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1e      	ldr	r2, [pc, #120]	@ (80022fc <TIM_Base_SetConfig+0xd8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <TIM_Base_SetConfig+0xd0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d103      	bne.n	80022cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f023 0201 	bic.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
  }
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800

08002300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f023 0201 	bic.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800232e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 0303 	bic.w	r3, r3, #3
 8002336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f023 0302 	bic.w	r3, r3, #2
 8002348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a1c      	ldr	r2, [pc, #112]	@ (80023c8 <TIM_OC1_SetConfig+0xc8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d10c      	bne.n	8002376 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f023 0308 	bic.w	r3, r3, #8
 8002362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <TIM_OC1_SetConfig+0xc8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d111      	bne.n	80023a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800238c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	621a      	str	r2, [r3, #32]
}
 80023bc:	bf00      	nop
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40012c00 	.word	0x40012c00

080023cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f023 0210 	bic.w	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f023 0320 	bic.w	r3, r3, #32
 8002416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <TIM_OC2_SetConfig+0xd0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d10d      	bne.n	8002448 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002446:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a14      	ldr	r2, [pc, #80]	@ (800249c <TIM_OC2_SetConfig+0xd0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d113      	bne.n	8002478 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800245e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	621a      	str	r2, [r3, #32]
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012c00 	.word	0x40012c00

080024a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002570 <TIM_OC3_SetConfig+0xd0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10d      	bne.n	800251a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a14      	ldr	r2, [pc, #80]	@ (8002570 <TIM_OC3_SetConfig+0xd0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d113      	bne.n	800254a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	621a      	str	r2, [r3, #32]
}
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40012c00 	.word	0x40012c00

08002574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	031b      	lsls	r3, r3, #12
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a0f      	ldr	r2, [pc, #60]	@ (800260c <TIM_OC4_SetConfig+0x98>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d109      	bne.n	80025e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	621a      	str	r2, [r3, #32]
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	40012c00 	.word	0x40012c00

08002610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	f023 0201 	bic.w	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800263a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f023 030a 	bic.w	r3, r3, #10
 800264c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	621a      	str	r2, [r3, #32]
}
 8002662:	bf00      	nop
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f023 0210 	bic.w	r2, r3, #16
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	031b      	lsls	r3, r3, #12
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80026a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	621a      	str	r2, [r3, #32]
}
 80026c0:	bf00      	nop
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f043 0307 	orr.w	r3, r3, #7
 80026ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026fe:	b480      	push	{r7}
 8002700:	b087      	sub	sp, #28
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002718:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	431a      	orrs	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4313      	orrs	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	609a      	str	r2, [r3, #8]
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2201      	movs	r2, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	431a      	orrs	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002798:	2302      	movs	r3, #2
 800279a:	e046      	b.n	800282a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a16      	ldr	r2, [pc, #88]	@ (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00e      	beq.n	80027fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e8:	d009      	beq.n	80027fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a12      	ldr	r2, [pc, #72]	@ (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d004      	beq.n	80027fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a10      	ldr	r2, [pc, #64]	@ (800283c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10c      	bne.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4313      	orrs	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800

08002840 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002858:	2302      	movs	r3, #2
 800285a:	e03d      	b.n	80028d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e042      	b.n	800299e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7fd ff55 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2224      	movs	r2, #36	@ 0x24
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002948:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fdfa 	bl	8003544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800295e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800296e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800297e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b08a      	sub	sp, #40	@ 0x28
 80029aa:	af02      	add	r7, sp, #8
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d175      	bne.n	8002ab2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_UART_Transmit+0x2c>
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06e      	b.n	8002ab4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2221      	movs	r2, #33	@ 0x21
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e4:	f7fe f87a 	bl	8000adc <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fe:	d108      	bne.n	8002a12 <HAL_UART_Transmit+0x6c>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d104      	bne.n	8002a12 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e003      	b.n	8002a1a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a1a:	e02e      	b.n	8002a7a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2200      	movs	r2, #0
 8002a24:	2180      	movs	r1, #128	@ 0x80
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fb98 	bl	800315c <UART_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e03a      	b.n	8002ab4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a52:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	3302      	adds	r3, #2
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e007      	b.n	8002a6c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	781a      	ldrb	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1cb      	bne.n	8002a1c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2140      	movs	r1, #64	@ 0x40
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fb64 	bl	800315c <UART_WaitOnFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e006      	b.n	8002ab4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e000      	b.n	8002ab4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	f040 8081 	bne.w	8002be0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_UART_Receive+0x2e>
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e079      	b.n	8002be2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2222      	movs	r2, #34	@ 0x22
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b02:	f7fd ffeb 	bl	8000adc <HAL_GetTick>
 8002b06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	88fa      	ldrh	r2, [r7, #6]
 8002b12:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b1c:	d108      	bne.n	8002b30 <HAL_UART_Receive+0x74>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d104      	bne.n	8002b30 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	e003      	b.n	8002b38 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b38:	e047      	b.n	8002bca <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2120      	movs	r1, #32
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fb09 	bl	800315c <UART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e042      	b.n	8002be2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	3302      	adds	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	e01f      	b.n	8002bbc <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b84:	d007      	beq.n	8002b96 <HAL_UART_Receive+0xda>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_UART_Receive+0xe8>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e008      	b.n	8002bb6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1b2      	bne.n	8002b3a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e000      	b.n	8002be2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0ba      	sub	sp, #232	@ 0xe8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_UART_IRQHandler+0x66>
 8002c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fbbc 	bl	80033c8 <UART_Receive_IT>
      return;
 8002c50:	e25b      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80de 	beq.w	8002e18 <HAL_UART_IRQHandler+0x22c>
 8002c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80d1 	beq.w	8002e18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_UART_IRQHandler+0xae>
 8002c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_UART_IRQHandler+0xd2>
 8002ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	f043 0202 	orr.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_UART_IRQHandler+0xf6>
 8002cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d011      	beq.n	8002d12 <HAL_UART_IRQHandler+0x126>
 8002cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	f043 0208 	orr.w	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 81f2 	beq.w	8003100 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_UART_IRQHandler+0x14e>
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fb47 	bl	80033c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <HAL_UART_IRQHandler+0x17a>
 8002d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d04f      	beq.n	8002e06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa51 	bl	800320e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d041      	beq.n	8002dfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002da6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002daa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002db2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1d9      	bne.n	8002d7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d013      	beq.n	8002df6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fcc <HAL_UART_IRQHandler+0x3e0>)
 8002dd4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fff4 	bl	8000dc8 <HAL_DMA_Abort_IT>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002df0:	4610      	mov	r0, r2
 8002df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df4:	e00e      	b.n	8002e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f99c 	bl	8003134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfc:	e00a      	b.n	8002e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f998 	bl	8003134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e006      	b.n	8002e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f994 	bl	8003134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e12:	e175      	b.n	8003100 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	bf00      	nop
    return;
 8002e16:	e173      	b.n	8003100 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	f040 814f 	bne.w	80030c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8148 	beq.w	80030c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8141 	beq.w	80030c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80b6 	beq.w	8002fd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8145 	beq.w	8003104 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e82:	429a      	cmp	r2, r3
 8002e84:	f080 813e 	bcs.w	8003104 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	f000 8088 	beq.w	8002fac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ec8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ecc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ed4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1d9      	bne.n	8002e9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ef8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3314      	adds	r3, #20
 8002f08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f0c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e1      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3314      	adds	r3, #20
 8002f44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e3      	bne.n	8002f24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f7c:	f023 0310 	bic.w	r3, r3, #16
 8002f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e3      	bne.n	8002f6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fed3 	bl	8000d52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f8bf 	bl	8003146 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fc8:	e09c      	b.n	8003104 <HAL_UART_IRQHandler+0x518>
 8002fca:	bf00      	nop
 8002fcc:	080032d3 	.word	0x080032d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 808e 	beq.w	8003108 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8089 	beq.w	8003108 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800300c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800301a:	647a      	str	r2, [r7, #68]	@ 0x44
 800301c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003020:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e3      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	623b      	str	r3, [r7, #32]
   return(result);
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003052:	633a      	str	r2, [r7, #48]	@ 0x30
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e3      	bne.n	800302e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	60fb      	str	r3, [r7, #12]
   return(result);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0310 	bic.w	r3, r3, #16
 800308a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003098:	61fa      	str	r2, [r7, #28]
 800309a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	69b9      	ldr	r1, [r7, #24]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	617b      	str	r3, [r7, #20]
   return(result);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e3      	bne.n	8003074 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f844 	bl	8003146 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030be:	e023      	b.n	8003108 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_UART_IRQHandler+0x4f4>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f90e 	bl	80032fa <UART_Transmit_IT>
    return;
 80030de:	e014      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <HAL_UART_IRQHandler+0x51e>
 80030ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f94d 	bl	8003398 <UART_EndTransmit_IT>
    return;
 80030fe:	e004      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
    return;
 8003100:	bf00      	nop
 8003102:	e002      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
      return;
 8003104:	bf00      	nop
 8003106:	e000      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
      return;
 8003108:	bf00      	nop
  }
}
 800310a:	37e8      	adds	r7, #232	@ 0xe8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316c:	e03b      	b.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d037      	beq.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fd fcb1 	bl	8000adc <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <UART_WaitOnFlagUntilTimeout+0x30>
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e03a      	b.n	8003206 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d023      	beq.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b80      	cmp	r3, #128	@ 0x80
 80031a2:	d020      	beq.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b40      	cmp	r3, #64	@ 0x40
 80031a8:	d01d      	beq.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d116      	bne.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f81d 	bl	800320e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2208      	movs	r2, #8
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00f      	b.n	8003206 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d0b4      	beq.n	800316e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800320e:	b480      	push	{r7}
 8003210:	b095      	sub	sp, #84	@ 0x54
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800322c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003236:	643a      	str	r2, [r7, #64]	@ 0x40
 8003238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800323c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e5      	bne.n	8003216 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3314      	adds	r3, #20
 8003250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	61fb      	str	r3, [r7, #28]
   return(result);
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3314      	adds	r3, #20
 8003268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800326a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800326c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e5      	bne.n	800324a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	2b01      	cmp	r3, #1
 8003284:	d119      	bne.n	80032ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	60bb      	str	r3, [r7, #8]
   return(result);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f023 0310 	bic.w	r3, r3, #16
 800329c:	647b      	str	r3, [r7, #68]	@ 0x44
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a6:	61ba      	str	r2, [r7, #24]
 80032a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6979      	ldr	r1, [r7, #20]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	613b      	str	r3, [r7, #16]
   return(result);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e5      	bne.n	8003286 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032c8:	bf00      	nop
 80032ca:	3754      	adds	r7, #84	@ 0x54
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ff21 	bl	8003134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b085      	sub	sp, #20
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b21      	cmp	r3, #33	@ 0x21
 800330c:	d13e      	bne.n	800338c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003316:	d114      	bne.n	8003342 <UART_Transmit_IT+0x48>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d110      	bne.n	8003342 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003334:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	1c9a      	adds	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	621a      	str	r2, [r3, #32]
 8003340:	e008      	b.n	8003354 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6211      	str	r1, [r2, #32]
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29b      	uxth	r3, r3
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4619      	mov	r1, r3
 8003362:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10f      	bne.n	8003388 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003376:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003386:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fea9 	bl	8003110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	@ 0x30
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b22      	cmp	r3, #34	@ 0x22
 80033da:	f040 80ae 	bne.w	800353a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e6:	d117      	bne.n	8003418 <UART_Receive_IT+0x50>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d113      	bne.n	8003418 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003406:	b29a      	uxth	r2, r3
 8003408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003410:	1c9a      	adds	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	629a      	str	r2, [r3, #40]	@ 0x28
 8003416:	e026      	b.n	8003466 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800342a:	d007      	beq.n	800343c <UART_Receive_IT+0x74>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <UART_Receive_IT+0x82>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d106      	bne.n	800344a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e008      	b.n	800345c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003456:	b2da      	uxtb	r2, r3
 8003458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29b      	uxth	r3, r3
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4619      	mov	r1, r3
 8003474:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003476:	2b00      	cmp	r3, #0
 8003478:	d15d      	bne.n	8003536 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0220 	bic.w	r2, r2, #32
 8003488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003498:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d135      	bne.n	800352c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	330c      	adds	r3, #12
 80034cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	613b      	str	r3, [r7, #16]
   return(result);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f023 0310 	bic.w	r3, r3, #16
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e6:	623a      	str	r2, [r7, #32]
 80034e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	69f9      	ldr	r1, [r7, #28]
 80034ec:	6a3a      	ldr	r2, [r7, #32]
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e5      	bne.n	80034c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b10      	cmp	r3, #16
 8003506:	d10a      	bne.n	800351e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003522:	4619      	mov	r1, r3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff fe0e 	bl	8003146 <HAL_UARTEx_RxEventCallback>
 800352a:	e002      	b.n	8003532 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fdf8 	bl	8003122 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	e002      	b.n	800353c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
  }
}
 800353c:	4618      	mov	r0, r3
 800353e:	3730      	adds	r7, #48	@ 0x30
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800357e:	f023 030c 	bic.w	r3, r3, #12
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	430b      	orrs	r3, r1
 800358a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <UART_SetConfig+0x114>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7fe fa18 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	e002      	b.n	80035ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035b4:	f7fe fa00 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 80035b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009a      	lsls	r2, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	4a22      	ldr	r2, [pc, #136]	@ (800365c <UART_SetConfig+0x118>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	0119      	lsls	r1, r3, #4
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009a      	lsls	r2, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f0:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <UART_SetConfig+0x118>)
 80035f2:	fba3 0302 	umull	r0, r3, r3, r2
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2064      	movs	r0, #100	@ 0x64
 80035fa:	fb00 f303 	mul.w	r3, r0, r3
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	3332      	adds	r3, #50	@ 0x32
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <UART_SetConfig+0x118>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003610:	4419      	add	r1, r3
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fbb2 f2f3 	udiv	r2, r2, r3
 8003628:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <UART_SetConfig+0x118>)
 800362a:	fba3 0302 	umull	r0, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2064      	movs	r0, #100	@ 0x64
 8003632:	fb00 f303 	mul.w	r3, r0, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	3332      	adds	r3, #50	@ 0x32
 800363c:	4a07      	ldr	r2, [pc, #28]	@ (800365c <UART_SetConfig+0x118>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	440a      	add	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40013800 	.word	0x40013800
 800365c:	51eb851f 	.word	0x51eb851f

08003660 <memset>:
 8003660:	4603      	mov	r3, r0
 8003662:	4402      	add	r2, r0
 8003664:	4293      	cmp	r3, r2
 8003666:	d100      	bne.n	800366a <memset+0xa>
 8003668:	4770      	bx	lr
 800366a:	f803 1b01 	strb.w	r1, [r3], #1
 800366e:	e7f9      	b.n	8003664 <memset+0x4>

08003670 <__libc_init_array>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	2600      	movs	r6, #0
 8003674:	4d0c      	ldr	r5, [pc, #48]	@ (80036a8 <__libc_init_array+0x38>)
 8003676:	4c0d      	ldr	r4, [pc, #52]	@ (80036ac <__libc_init_array+0x3c>)
 8003678:	1b64      	subs	r4, r4, r5
 800367a:	10a4      	asrs	r4, r4, #2
 800367c:	42a6      	cmp	r6, r4
 800367e:	d109      	bne.n	8003694 <__libc_init_array+0x24>
 8003680:	f000 f81a 	bl	80036b8 <_init>
 8003684:	2600      	movs	r6, #0
 8003686:	4d0a      	ldr	r5, [pc, #40]	@ (80036b0 <__libc_init_array+0x40>)
 8003688:	4c0a      	ldr	r4, [pc, #40]	@ (80036b4 <__libc_init_array+0x44>)
 800368a:	1b64      	subs	r4, r4, r5
 800368c:	10a4      	asrs	r4, r4, #2
 800368e:	42a6      	cmp	r6, r4
 8003690:	d105      	bne.n	800369e <__libc_init_array+0x2e>
 8003692:	bd70      	pop	{r4, r5, r6, pc}
 8003694:	f855 3b04 	ldr.w	r3, [r5], #4
 8003698:	4798      	blx	r3
 800369a:	3601      	adds	r6, #1
 800369c:	e7ee      	b.n	800367c <__libc_init_array+0xc>
 800369e:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a2:	4798      	blx	r3
 80036a4:	3601      	adds	r6, #1
 80036a6:	e7f2      	b.n	800368e <__libc_init_array+0x1e>
 80036a8:	08003720 	.word	0x08003720
 80036ac:	08003720 	.word	0x08003720
 80036b0:	08003720 	.word	0x08003720
 80036b4:	08003724 	.word	0x08003724

080036b8 <_init>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr

080036c4 <_fini>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr
